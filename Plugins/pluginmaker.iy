local Plugin = {
["PluginName"] = "plugin maker",
["PluginDescription"] = "Makes plugins",
["Commands"] = {
["pluginmaker"] = {
["ListName"] = "pluginmaker",
["Description"] = "Opens a gui to make plugins",
["Aliases"] = {"pluginmaker"},
["Function"] = function(args, speaker)
-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local pname = Instance.new("TextBox")
local pdesc = Instance.new("TextBox")
local cmdname = Instance.new("TextBox")
local cdesc = Instance.new("TextBox")
local TextLabel = Instance.new("TextLabel")
local CodingFrame = Instance.new("ScrollingFrame")
local Source = Instance.new("TextBox")
local Comments_ = Instance.new("TextLabel")
local Globals_ = Instance.new("TextLabel")
local Keywords_ = Instance.new("TextLabel")
local RemoteHighlight_ = Instance.new("TextLabel")
local Strings_ = Instance.new("TextLabel")
local Tokens_ = Instance.new("TextLabel")
local Numbers_ = Instance.new("TextLabel")
local TextLabel_2 = Instance.new("TextLabel")
local Lines = Instance.new("TextLabel")
local TextButton = Instance.new("TextButton")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.Position = UDim2.new(0.480508476, 0, 0.318428189, 0)
Frame.Size = UDim2.new(0.201694921, 0, 0.281842828, 0)

pname.Name = "pname"
pname.Parent = Frame
pname.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
pname.Position = UDim2.new(0, 0, 0.114814818, 0)
pname.Size = UDim2.new(0.5, 0, 0.129629627, 0)
pname.Font = Enum.Font.SourceSans
pname.PlaceholderText = "Plugin Name"
pname.Text = ""
pname.TextColor3 = Color3.fromRGB(0, 0, 0)
pname.TextSize = 14.000

pdesc.Name = "pdesc"
pdesc.Parent = Frame
pdesc.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
pdesc.Position = UDim2.new(0, 0, 0.237037033, 0)
pdesc.Size = UDim2.new(0.5, 0, 0.244444445, 0)
pdesc.ZIndex = 3
pdesc.Font = Enum.Font.SourceSans
pdesc.PlaceholderText = "Plugin Description"
pdesc.Text = ""
pdesc.TextColor3 = Color3.fromRGB(0, 0, 0)
pdesc.TextSize = 14.000

cmdname.Name = "cmdname"
cmdname.Parent = Frame
cmdname.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
cmdname.Position = UDim2.new(0.5, 0, 0.114814818, 0)
cmdname.Size = UDim2.new(0.5, 0, 0.129629627, 0)
cmdname.ZIndex = 2
cmdname.Font = Enum.Font.SourceSans
cmdname.PlaceholderText = "Command Name"
cmdname.Text = ""
cmdname.TextColor3 = Color3.fromRGB(0, 0, 0)
cmdname.TextSize = 14.000

cdesc.Name = "cdesc"
cdesc.Parent = Frame
cdesc.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
cdesc.Position = UDim2.new(0.5, 0, 0.237037033, 0)
cdesc.Size = UDim2.new(0.5, 0, 0.244444445, 0)
cdesc.ZIndex = 4
cdesc.Font = Enum.Font.SourceSans
cdesc.PlaceholderText = "Command Description"
cdesc.Text = ""
cdesc.TextColor3 = Color3.fromRGB(0, 0, 0)
cdesc.TextSize = 14.000

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Size = UDim2.new(1, 0, 0.111111112, 0)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = "Infinite Yield Plugin Maker"
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

CodingFrame.Name = "CodingFrame"
CodingFrame.Parent = Frame
CodingFrame.Active = true
CodingFrame.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
CodingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
CodingFrame.BorderSizePixel = 0
CodingFrame.Position = UDim2.new(0, 0, 0.481481493, 0)
CodingFrame.Size = UDim2.new(1, 0, 0.366666675, 0)
CodingFrame.BottomImage = "rbxassetid://5903324492"
CodingFrame.CanvasSize = UDim2.new(0, 0, 0, 250)
CodingFrame.MidImage = "rbxassetid://5903324492"
CodingFrame.ScrollBarThickness = 6
CodingFrame.TopImage = "rbxassetid://5903324492"

Source.Name = "Source"
Source.Parent = CodingFrame
Source.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Source.BackgroundTransparency = 1.000
Source.Position = UDim2.new(0, 20, 0, 0)
Source.Size = UDim2.new(1, -26, 1, 0)
Source.ZIndex = 3
Source.ClearTextOnFocus = false
Source.Font = Enum.Font.Code
Source.MultiLine = true
Source.PlaceholderColor3 = Color3.fromRGB(204, 204, 204)
Source.Text = ""
Source.TextColor3 = Color3.fromRGB(204, 204, 204)
Source.TextSize = 12.000
Source.TextXAlignment = Enum.TextXAlignment.Left
Source.TextYAlignment = Enum.TextYAlignment.Top

Comments_.Name = "Comments_"
Comments_.Parent = Source
Comments_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Comments_.BackgroundTransparency = 1.000
Comments_.Size = UDim2.new(1, 0, 1, 0)
Comments_.ZIndex = 5
Comments_.Font = Enum.Font.Code
Comments_.Text = ""
Comments_.TextColor3 = Color3.fromRGB(59, 200, 59)
Comments_.TextSize = 12.000
Comments_.TextXAlignment = Enum.TextXAlignment.Left
Comments_.TextYAlignment = Enum.TextYAlignment.Top

Globals_.Name = "Globals_"
Globals_.Parent = Source
Globals_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Globals_.BackgroundTransparency = 1.000
Globals_.Size = UDim2.new(1, 0, 1, 0)
Globals_.ZIndex = 5
Globals_.Font = Enum.Font.Code
Globals_.Text = ""
Globals_.TextColor3 = Color3.fromRGB(132, 214, 247)
Globals_.TextSize = 12.000
Globals_.TextXAlignment = Enum.TextXAlignment.Left
Globals_.TextYAlignment = Enum.TextYAlignment.Top

Keywords_.Name = "Keywords_"
Keywords_.Parent = Source
Keywords_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Keywords_.BackgroundTransparency = 1.000
Keywords_.Size = UDim2.new(1, 0, 1, 0)
Keywords_.ZIndex = 5
Keywords_.Font = Enum.Font.Code
Keywords_.Text = ""
Keywords_.TextColor3 = Color3.fromRGB(248, 109, 124)
Keywords_.TextSize = 12.000
Keywords_.TextXAlignment = Enum.TextXAlignment.Left
Keywords_.TextYAlignment = Enum.TextYAlignment.Top

RemoteHighlight_.Name = "RemoteHighlight_"
RemoteHighlight_.Parent = Source
RemoteHighlight_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RemoteHighlight_.BackgroundTransparency = 1.000
RemoteHighlight_.Size = UDim2.new(1, 0, 1, 0)
RemoteHighlight_.ZIndex = 5
RemoteHighlight_.Font = Enum.Font.Code
RemoteHighlight_.Text = ""
RemoteHighlight_.TextColor3 = Color3.fromRGB(0, 144, 255)
RemoteHighlight_.TextSize = 12.000
RemoteHighlight_.TextXAlignment = Enum.TextXAlignment.Left
RemoteHighlight_.TextYAlignment = Enum.TextYAlignment.Top

Strings_.Name = "Strings_"
Strings_.Parent = Source
Strings_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Strings_.BackgroundTransparency = 1.000
Strings_.Size = UDim2.new(1, 0, 1, 0)
Strings_.ZIndex = 5
Strings_.Font = Enum.Font.Code
Strings_.Text = ""
Strings_.TextColor3 = Color3.fromRGB(173, 241, 149)
Strings_.TextSize = 12.000
Strings_.TextXAlignment = Enum.TextXAlignment.Left
Strings_.TextYAlignment = Enum.TextYAlignment.Top

Tokens_.Name = "Tokens_"
Tokens_.Parent = Source
Tokens_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Tokens_.BackgroundTransparency = 1.000
Tokens_.Size = UDim2.new(1, 0, 1, 0)
Tokens_.ZIndex = 5
Tokens_.Font = Enum.Font.Code
Tokens_.Text = ""
Tokens_.TextColor3 = Color3.fromRGB(255, 255, 255)
Tokens_.TextSize = 12.000
Tokens_.TextXAlignment = Enum.TextXAlignment.Left
Tokens_.TextYAlignment = Enum.TextYAlignment.Top

Numbers_.Name = "Numbers_"
Numbers_.Parent = Source
Numbers_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Numbers_.BackgroundTransparency = 1.000
Numbers_.Size = UDim2.new(1, 0, 1, 0)
Numbers_.ZIndex = 4
Numbers_.Font = Enum.Font.Code
Numbers_.Text = ""
Numbers_.TextColor3 = Color3.fromRGB(255, 198, 0)
Numbers_.TextSize = 12.000
Numbers_.TextXAlignment = Enum.TextXAlignment.Left
Numbers_.TextYAlignment = Enum.TextYAlignment.Top

TextLabel_2.Parent = CodingFrame
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.Size = UDim2.new(1, 0, 1, 0)
TextLabel_2.Visible = false
TextLabel_2.Font = Enum.Font.Code
TextLabel_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.TextSize = 12.000
TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left
TextLabel_2.TextYAlignment = Enum.TextYAlignment.Top

Lines.Name = "Lines"
Lines.Parent = CodingFrame
Lines.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Lines.BackgroundTransparency = 1.000
Lines.Size = UDim2.new(0, 20, 1, 0)
Lines.ZIndex = 4
Lines.Font = Enum.Font.Code
Lines.Text = "1"
Lines.TextColor3 = Color3.fromRGB(255, 255, 255)
Lines.TextSize = 12.000
Lines.TextXAlignment = Enum.TextXAlignment.Left
Lines.TextYAlignment = Enum.TextYAlignment.Top

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextButton.Position = UDim2.new(0, 0, 0.851851881, 0)
TextButton.Size = UDim2.new(1, 0, 0.148148149, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "Save"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 14.000

-- Scripts:

local function FCVP_fake_script() -- CodingFrame.LocalScript 
	local script = Instance.new('LocalScript', CodingFrame)

	local textsize = 12
	
	for i,v in pairs(script.Parent:GetDescendants()) do
		if v:IsA("TextBox") or v:IsA("TextLabel") then
			v.TextSize = textsize
		end
	end
	
	function split(text, splitter)
		splitter = tostring(splitter)
		text = text..splitter
		local returning = {}
		local returningtxt = ""
		local tnumber = tonumber(#splitter) - 1
		for i = 1,#text do
			if text:sub(i,i+tnumber) ~= splitter and splitter ~= "" then
				returningtxt = returningtxt..text:sub(i,i)
			else
				if splitter == "" then
					returning[#returning+1] = text:sub(i,i)
				else
					returning[#returning+1] = returningtxt
				end
				returningtxt = ""
			end
		end
		return returning
	end
	
	local lua_keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"}
	local global_env = {"getrawmetatable", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16"}
	
	local Source = script.Parent.Source
	local Lines = Source.Parent.Lines
	
	local Highlight = function(string, keywords)
	    local K = {}
	    local S = string
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    for i, v in pairs(keywords) do
	        K[v] = true
	    end
	    S = S:gsub(".", function(c)
	        if Token[c] ~= nil then
	            return "\32"
	        else
	            return c
	        end
	    end)
	    S = S:gsub("%S+", function(c)
	        if K[c] ~= nil then
	            return c
	        else
	            return (" "):rep(#c)
	        end
	    end)
	  
	    return S
	end
	
	local hTokens = function(string)
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    local A = ""
	    string:gsub(".", function(c)
	        if Token[c] ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	
	local strings = function(string)
	    local highlight = ""
	    local quote = false
	    string:gsub(".", function(c)
	        if quote == false and c == "\"" then
	            quote = true
	        elseif quote == true and c == "\"" then
	            quote = false
	        end
	        if quote == false and c == "\"" then
	            highlight = highlight .. "\""
	        elseif c == "\n" then
	            highlight = highlight .. "\n"
			elseif c == "\t" then
			    highlight = highlight .. "\t"
	        elseif quote == true then
	            highlight = highlight .. c
	        elseif quote == false then
	            highlight = highlight .. "\32"
	        end
	    end)
	  
	    return highlight
	end
	
	local comments = function(string)
	    local ret = ""
	    string:gsub("[^\r\n]+", function(c)
	        local comm = false
	        local i = 0
	        c:gsub(".", function(n)
	            i = i + 1
	            if c:sub(i, i + 1) == "--" then
	                comm = true
	            end
	            if comm == true then
	                ret = ret .. n
	            else
	                ret = ret .. "\32"
	            end
	        end)
	        ret = ret
	    end)
	    
	    return ret
	end
	
	local numbers = function(string)
	    local A = ""
	    string:gsub(".", function(c)
	        if tonumber(c) ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	function gettextsizex(text)
		script.Parent.TextLabel.Text = text
		return script.Parent.TextLabel.TextBounds.X
	end
	
	local highlight_source = function(type)
		if type == "Text" then
			Source.Text = Source.Text:gsub("\13", "")
			Source.Text = Source.Text:gsub("\t", "      ")
			local s = Source.Text
			Source.Keywords_.Text = Highlight(s, lua_keywords)
			Source.Globals_.Text = Highlight(s, global_env)
			Source.RemoteHighlight_.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer"})
			Source.Tokens_.Text = hTokens(s)
			Source.Numbers_.Text = numbers(s)
			Source.Strings_.Text = strings(s)
			local lin = 1
			s:gsub("\n", function()
				lin = lin + 1
			end)
			Lines.Text = ""
			for i = 1, lin do
				Lines.Text = Lines.Text .. i .. "\n"
			end
			Source.Parent.CanvasSize = UDim2.fromOffset(Source.TextBounds.X + 25 + 6, Source.TextBounds.Y + 10 + 6)
			local ymax = -1
			Source.Text:sub(0,Source.CursorPosition):gsub("\n", function()
				ymax = ymax + 1
			end)
			
			local xmax = 0
			local currentline = ""
			
			local newtable = split(Source.Text, "\n")
			currentline = newtable[#newtable]
			
			xmax = gettextsizex(currentline)
			
			Source.Parent.CanvasPosition = Vector2.new(xmax, ymax * Source.TextSize)
		end
	end
	
	highlight_source("Text")
	
	Source.Changed:Connect(highlight_source)
	
	
end
coroutine.wrap(FCVP_fake_script)()
local function AJVGOTN_fake_script() -- TextButton.LocalScript 
	local script = Instance.new('LocalScript', TextButton)

	frame = script.Parent.Parent
	if not writefile then
		function writefile(file, contents)
			warn(file)
			print(contents)
		end
	end
	
	function makeplugin(pname, pdesc, cname, cdesc, scripting)
		pname = tostring(pname):lower()
		cname = tostring(cname):lower()
		local start = 'local Plugin = {'
		local pluginname = ('["PluginName"] = "'..pname..'",')
		local plugindescription = ('["PluginDescription"] = "'..pdesc..'",')
		local cmdp = '["Commands"] = {'
		local cmdname = ('["'..cname..'"] = {')
		local listname = ('["ListName"] = "'..cname..'",')
		local description = ('["Description"] = "'..cdesc..'",')
		local alias = ('["Aliases"] = {"'..cname..'"},')
		local sfunction = ('["Function"] = function(args, speaker)\n'..scripting.."\nend,},},}\nreturn Plugin")
		local finalle = (start.."\n"..pluginname.."\n"..plugindescription.."\n"..cmdp.."\n"..cmdname.."\n"..listname.."\n"..description.."\n"..alias.."\n"..sfunction)
		writefile("IY Plugins/"..pname..".iy", finalle)
	end
	script.Parent.MouseButton1Click:Connect(function()
		makeplugin(frame.pname.Text, frame.pdesc.Text, frame.cmdname.Text, frame.cdesc.Text, frame.CodingFrame.Source.Text)
	end)
end
coroutine.wrap(AJVGOTN_fake_script)()

end,},},}
return Plugin